@use "partial" as p;
$hundred: 100%;

@mixin scale-color($scale, $color: white){ // can also add default params
  color: $color;
  scale: $scale;
}

@function k($x){
  @return 10*$x;
}

.container{
  text-align: center;
  min-width: $hundred;
  /* border: 1px solid red; */
}

.title{
  color: p.$text-color;
}

.imageZoom {
  overflow: hidden;

  img {
    background-image: rgb(0,0,0,0.1);
    width: $hundred;
    transition: 0.2s all ease-in-out;
    cursor: pointer;

    &:hover { // scss says to use &:hover but it works fine without & 
        transform: scale(1.05); 
    }
  }
}

@keyframes slideInFromLeft {
  0% {
    transform: translateX(-80%);
  }
  100% {
    transform: translateX(0);
  }
}

.header {  
  animation: 0.9s ease-out 0s 1 slideInFromLeft;
  margin-left: 142px;
}

.backArrow{
  @include scale-color(4, p.$focus-color);
  z-index: 1;
  position: fixed;
  top: 100px;
  left: 165px;

  :hover{ 
    cursor: pointer;
  }
}

.infoCard{
  margin-right: 200px;
  margin-bottom: 200px;
}

.iconLink { // this small project really doesn't benefit from using partials, just added complexity
  @include scale-color(2, white); // sending the var text-color just to show it, even though it is the same as the default param
  margin: 10px;
}

.iconLinkNoMargin {
  @include scale-color(2);
}

.extraMarginLeft{
  margin-left: k(2px); // if you don't want to write the whole number, imagine if the number was in billions just write b(2px) but when would you really do that in css?
}
